name: Build, Push, and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: container-deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  quality-checks:
    name: Run quality checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.21"

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run lint
        run: bun run lint

  build-and-push:
    name: Build and push image
    runs-on: ubuntu-24.04-arm64
    needs: quality-checks
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Compute image name (lowercase)
        id: vars
        run: |
          REPO="${GITHUB_REPOSITORY#*/}"
          echo "image=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/${REPO,,}" >> "$GITHUB_OUTPUT"

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy (restart remote service)
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Select deploy image tag
        id: image
        env:
          IMAGE_TAGS: ${{ needs.build-and-push.outputs.image_tags }}
        run: |
          set -euo pipefail
          if [ -z "${IMAGE_TAGS}" ]; then
            echo "No image tags received from build job" >&2
            exit 1
          fi
          deploy_tag=$(printf '%s\n' "${IMAGE_TAGS}" | grep -E ':latest$' | head -n 1 || true)
          if [ -z "${deploy_tag}" ]; then
            deploy_tag=$(printf '%s\n' "${IMAGE_TAGS}" | head -n 1)
          fi
          if [ -z "${deploy_tag}" ]; then
            echo "No image tag found to deploy" >&2
            exit 1
          fi
          echo "deploy_tag=${deploy_tag}" >> "${GITHUB_OUTPUT}"

      - name: Prepare SSH
        env:
          NIX_SSH_HOST: ${{ secrets.NIX_SSH_HOST }}
          NIX_SSH_KEY: ${{ secrets.NIX_SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          ssh-keyscan -H "${NIX_SSH_HOST}" >> ~/.ssh/known_hosts
          echo "${NIX_SSH_KEY}" | tr -d '\r' > ~/.ssh/id_ci
          chmod 600 ~/.ssh/id_ci

      - name: Pre-pull image on remote (retry)
        env:
          NIX_SSH_USER: ${{ secrets.NIX_SSH_USER }}
          NIX_SSH_HOST: ${{ secrets.NIX_SSH_HOST }}
        run: |
          set -euo pipefail
          DEPLOY_IMAGE="${{ steps.image.outputs.deploy_tag }}"
          if [ -z "${DEPLOY_IMAGE}" ]; then
            echo "No image tag provided" >&2
            exit 1
          fi
          ssh -i ~/.ssh/id_ci \
            -o StrictHostKeyChecking=yes \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${NIX_SSH_USER}@${NIX_SSH_HOST}" \
            DEPLOY_IMAGE="${DEPLOY_IMAGE}" 'bash -s' <<'EOF'
          set -eo pipefail
          for attempt in $(seq 1 8); do
            if sudo docker pull "${DEPLOY_IMAGE}"; then
              echo "Pulled ${DEPLOY_IMAGE}"
              exit 0
            fi
            echo "Pull failed (attempt $attempt), sleeping 15s..."
            sleep 15
          done
          echo "Failed to pull ${DEPLOY_IMAGE} after retries"
          exit 1
          EOF

      - name: Restart docker-lingscript on remote
        env:
          NIX_SSH_USER: ${{ secrets.NIX_SSH_USER }}
          NIX_SSH_HOST: ${{ secrets.NIX_SSH_HOST }}
        run: |
          set -euo pipefail
          ssh -i ~/.ssh/id_ci \
            -o StrictHostKeyChecking=yes \
            -o UserKnownHostsFile=~/.ssh/known_hosts \
            "${NIX_SSH_USER}@${NIX_SSH_HOST}" <<'EOF'
          set -eo pipefail
          sudo systemctl restart docker-lingscript
          for attempt in $(seq 1 6); do
            sleep 10
            if sudo systemctl is-active --quiet docker-lingscript; then
              exit 0
            fi
            echo "Service not active yet (attempt $attempt)"
          done
          sudo systemctl status docker-lingscript --no-pager
          exit 1
          EOF

